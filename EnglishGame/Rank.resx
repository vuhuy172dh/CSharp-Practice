<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAPY6AQD2OgEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAABAAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAA
        AAMAAAADAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAKAAAACsAAAAqQAAAKoAAACoAAAAswAA
        ALoAAACuAAAAqAAAAKoAAACqAAAAqQAAAKwAAAC5AAAAtQAAAKkAAACpAAAAqQAAAKoAAACpAAAAswAA
        ALoAAACuAAAAqAAAAKoAAACnAAAAswAAAHEAAAAAAAAAAgAAAAAAAAAzAAAA/zcvI/5GOyz/OCAe/gQC
        Av8AAADYAgEBvAAAAO0WEg7/Rj4t/kMvJ/4dDg7/AAAA9AEBAcAAAADRAAAA/zgwI/9GOiv/Nx8d/gMB
        Av8AAADXAgEBvQAAAO4YFQ//Rz4t/kMvJ/wbDQ3/AAAAzAAAAAAAAAABAAAAAAAAADIAAAD/0rWF+v/h
        p/vXfHP4DgYH/wAAAFcAAAAAAAAAsFBDMv//7634/7WV+Wo0Nf8AAADNAAAAAAAAADYAAAD/1biH+v/f
        pvvVeXH4DAUG/wAAAFMAAAAAAAAAs1lLOP//8K74/7OU+WcyM/8AAADJAAAAAAAAAAEAAAAAAAAAMwAA
        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
        AAAAAAC6Cwcc/w0JIv8AAADQDAggBgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAA
        AAEAAAAAEAsmFgAAAPBHL676VDjN9gAAAP0FBAwqAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABQAA
        AAMAAAAAAAAAAAAAAQEAAAAAAAAAvgwIH/8PCib/AAAA0wwIIAcAAAAAAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAXAAAAiwAAAJQAAAAiAAAAAAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAEAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAwAAAA4AAAAL/////gAAAAoAAAAKAgQECgIEBAoCBAQKAgQECgIEBAoCB
        AQKAgQECIoEBAkGBAQJBgQECQYEBAiKBAQJIgQECIUMBAvZBAQL+gQEC/kFBAv9CgwL+mIMC/0KChf/m
        RIL//pEC//5Agv///oX///0y///+hf///88=
</value>
  </data>
</root>