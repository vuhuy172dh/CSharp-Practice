<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAHgAA
        ABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAAB4AAAADAAAAAAAAAAAAAAAAAAAAcAEB
        AeoXFxf/Dg4O/gAAAM8AAABJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASQAAAM8ODg7+FxcX/wEBAeoAAABwAAAAAAAA
        AF4dHR7+qaqr/8zNzv+1trf/dHR2/xAQEf0AAABlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGUQEBD9cXJ0/7Kztf/LzM3/qaqr/x0d
        Hv4AAABeAAAAzXZ3ef++v8H/z9DR/7u8vf+goaP/dnd5/wUFBfUAAAAZAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZBQUF9Xh5fP+io6X/ubq8/8/Q
        0f+/wML/d3d5/wAAAM0CAgL6iouO/7a3uf/P0NL/vr/B/52eoP+EhYf/Nzc4/wAAAJcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJc5Ojz/j5CT/6eo
        q/+/wML/z9DS/7e4uv+LjI//AgIC+gEBAvqAgYT/ra6w/83Oz//Gx8j/nJ2f/4KDhf9mZ2r/CAgI+gAA
        AEEAAACEAAAAtQAAAKAAAABBAAAAAAAAAAAAAAAAAAAAAAAAAEEAAACgAAAAtQAAAIQAAABBCAgI+nZ3
        ev+Vlpn/ra6w/8XGx//Nzs//rK2v/3+Ag/8CAgL6AAAA2GlpbP+kpaj/x8jK/8vMzf+io6X/f4CD/2lq
        bf84OTr/AQEB/kFBQv9+f4H/Z2dp/xQUFP4AAAByAAAAAAAAAAAAAAByExMU/mJjZP96e33/Pz9B/wEB
        Af5AQUP/goOH/5qbnv+ys7X/ysvM/8jJyv+Zmp3/Y2Rn/wAAANgAAACsT1BS/5ucnv/AwcP/z9DR/66v
        sf99foD/Z2lr/1hZW/9TU1X/jY6R/6Okp/+lpqn/iYqN/wkJCfkAAAC7AAAAuwgICfmGh4n/np+i/56f
        ov+Ki4//T1BT/2xtcP+BgoX/l5mb/7a3uP/Oz9D/vL2//4eIi/9JSUz/AAAArAAAAIA4OTr/kJGU/7e4
        uv/Q0dL/vb7A/3x9f/9mZ2r/VFVY/3Fydv90dHj/cXBx/3Nzdf9+f4P/eXp8/4mKi/+Kioz/ent9/31+
        gv9zc3X/cXBx/3N0eP9wcXX/YmNn/3R2ef+Ki47/vb6//8/Q0v+qq63/dnd7/zMzNf8AAACAAAAAVSMk
        Jf+Bgob/q6yu/8zNzv+oqaz/fn+C/3Z2ev9vcHP/e3yA/0pFQP88NCz/Pjcv/21sbv+Oj5L/r7Cy/6+w
        sv+Oj5L/cG9x/z84MP88NCz/SEI9/3p7fv9wcXT/dnd7/3+Ag/+nqKv/zM3P/5SVl/9naWz/IiIj/wAA
        AFUAAAApEBAR/3N0eP+XmZv/j5CT/3+Ag/+AgYX/gYKF/4CBhP+Cg4b/SkM7/1lSS/9RSkP/YmBe/5SV
        mP+DgYH/enh4/4OEiP9mZGP/UUtD/1hSS/9JQjv/f3+C/4CBhP+BgoX/gIGF/3+Ag/+PkJP/fn+C/15f
        Yv8QEBH/AAAAKQAAAAYBAQL2ZWZq/46Pkv+Oj5L/kJGU/4eGhv+DgH3/j4+R/5ubnv98eHX/lZGM/4N/
        ev+Pjo//i4yP/5OUkv+TlJH/i4yP/5KRk/+EgHv/lZGM/3p2cv+am53/f3+C/0pKSf9zc3X/j5CT/46P
        kv+Kio7/WFlc/wEBAvYAAAAGAAAAAAAAANFiY2X/np+i/5+gov+goaP/jIqI/4N/ev+Xl5n/oKCj/6qr
        rf+rq6v/paWn/5mZnP+Wlpn/iYmK/4uLjP+Wl5n/mZqd/6enqf+qqar/qqqs/6Cgo/9wcHL/kIZx/2Zl
        Zf+foKP/n6Ci/6Cho/9fYGP/AAAA0QAAAAAAAAAAAAAApWNkZf+vr7L/lZSS/5GPjf+YmJj/fXp3/5+e
        n/+WlJH/qqmp/7e3uf+foKH/lpaT/5+fof+dnZ//np6g/6Ojpf+YmJX/pqep/66vsf+GhYn/amhu/6qq
        rP+ampz/ra2w/29ueP+AgIb/uLm7/2NkZv8AAAClAAAAAAAAAAAAAAB6V1dY/8HBw/+Niob/fXl0/6Gh
        oP+3t7f/hYJ+/4OAev+hoJ//w8PF/7m5u/+9vbv/uLe5/6alpf+mpaT/uLi6/72+vf+/v8H/wsLE/3Bm
        ev9nWXX/mJma/8nJy/+sra7/SERn/1NQcP/BwcP/V1dY/wAAAHoAAAAAAAAAAAAAAEYuLi//zs/Q/7y8
        vf+7u7z/oJ6c/3dzbf+6ubr/urm5/8LCw//Q0NH/1tbX/9fX2P/R0dL/yMjI/8bFxf/T09T/19fY/9bW
        1//Q0NH/ubm8/6akqf/CwsP/f3+A/7e3uP+mpq7/s7O3/8/Q0f8uLi7/AAAARQAAAAAAAAAAAAAABQAA
        AN6jo6T/39/g/93d3v+koqD/h4N+/8TExP/f3+D/39/g/+Li4//o6On/6Ojp/87NzP/KyMb/xsTD/9TT
        0v/o6On/6Ojp/+Li4//f3+D/39/g/46Pjv9yf1D/enx1/97e3//f3+D/o6Ok/wAAAN0AAAAFAAAAAAAA
        AAAAAAAAAAAARRMTE/q+vr//7e3t/9TU1P/NzMv/4ODh/+7u7//U1NX/LS0t/ygoKP8oKCj/KCgo/ygo
        KP8oKCj/KCgo/ygoKP8oKCj/KSkp/8zMzf/u7u//2tvb/6irov/Nzs7/7e3u/8LCwv8TExP6AAAARAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAajY2N//U1NX/6enp/+/v8P/q6uv/1tfY/5ubnf8AAADXAAAAMgAA
        ADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAADDiIiJ/9bW1//r6+v/8PDx/+vr6//W1tf/R0hI/wAA
        AHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAQE76urq//o6On/7Ozs/+zs7P/Kysv/Q0ND/wAA
        AIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG01NTX/xcXF/+3t7f/t7e3/6+vr/7u7
        vP8LCwv4AAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNAAAA4RQUFP8jIyP/EhIS/gAA
        AOQAAACLAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAH4AAADfDw8P/iIi
        Iv8XFxf/AQEB6AAAAF4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAFwAA
        ACIAAAAUAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAASAAAAIQAAABkAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////H///jgf//gQD//wAAf/4AAH/+AAAD
        wAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAYAAAAGAAAABgAAAAcAAAAPgAAAH4A/wB/AP
        8A/4P/4f//////////////////////////8=
</value>
  </data>
</root>